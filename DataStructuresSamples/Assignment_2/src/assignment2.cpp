/* @Author
* Student Name: Nebi Deniz Uras
* Student ID : 504181527
* Date: 01.11.2018 */

//============================================================================//
//
//	File Name	: assignment2.cpp
//	Create Date	: 01.11.2018
//	Designers	: Nebi Deniz Uras
//	Number 	    : 504181527
//	Description	: Data Structures Homework 2
//
//	Important Notes:
//
//============================================================================//

//============================================================================//
//=============================== INCLUDES ===================================//
//============================================================================//
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>

//============================================================================//
//==========================  MACRO DEFINITIONS ==============================//
//============================================================================//

//============================================================================//
//=========================== TYPE DEFINITIONS ===============================//
//============================================================================//
struct occur_node {
	char character;
	occur_node *next;
	int occurence;
};

struct vocab_node {
	char character;
	vocab_node *next;
	occur_node *list;
};

struct vocab_list {
	vocab_node *head;
	void create();
	void print();
	void add_char(char );
	void add_occurence(char , char );
	int get_occurence(char );
	int get_union_occurence (char , char );
};

struct language_model {
	vocab_list *vocabularylist;
	void readData (const char *);
	double calculateProbability (char, char);
};

//============================================================================//
//========================== FUNCTION PROTOTYPES =============================//
//============================================================================//

//============================================================================//
//============================ GLOBAL VARIABLES ==============================//
//============================================================================//

//============================================================================//
//============================ PUBLIC FUNCTIONS ==============================//
//============================================================================//

int main(int argc, char *argv[])
{
	
	getchar();
    return 0;
}

//============================================================================//
//============================ PRIVATE FUNCTIONS =============================//
//============================================================================//

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void vocab_list::create()
{

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void vocab_list::print()
{

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void vocab_list::add_char(char)
{

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void vocab_list::add_occurence(char, char)
{

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
int vocab_list::get_occurence(char)
{
	return 0;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
int vocab_list::get_union_occurence(char, char)
{
	return 0;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void language_model::readData(const char *)
{

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
double language_model::calculateProbability(char, char)
{
	return 0;
}
